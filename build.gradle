import ru.vyarus.gradle.plugin.animalsniffer.AnimalSniffer

//apply plugin: 'groovy'
apply plugin: 'info.solidsoft.cdeliveryboy'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'info.solidsoft.gradle:cdeliveryboy:0.6.0'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.4.2'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.7'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
    }
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    scmVersion {
        hooks {
            pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /classpath\ "info\.solidsoft\.gradle\.pitest:gradle-pitest-plugin:$previousVersion"/ },
                               replacement: { currentVersion, context -> "classpath \"info.solidsoft.gradle.pitest:gradle-pitest-plugin:$currentVersion\"" }]
            pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /id\ "info\.solidsoft\.pitest"\ version\ "$previousVersion"/ },
                               replacement: { currentVersion, context -> "id \"info.solidsoft.pitest\" version \"$currentVersion\"" }]
            pre 'fileUpdate', [file       : 'CHANGELOG.md', pattern: { previousVersion, context -> /^##\ ${context.currentVersion}\ -\ Unreleased$/ },
                               replacement: { currentVersion, context -> "## $currentVersion - ${new Date().format( 'yyyy-MM-dd' )}" }]
        }
    }

    project.version = scmVersion.version
}

subprojects { subproject ->

    apply plugin: 'java'
    apply plugin: 'ru.vyarus.animalsniffer'
    apply plugin: 'io.spring.dependency-management'
    group = 'info.solidsoft.gradle.pitest'
    sourceCompatibility = 1.7
    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/allTests")
        reportOn test, 'functional-tests:funcTest'
    }
    dependencies {
        compile gradleApi()
        compile localGroovy()

        testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
            //groovy 2.3.x is already provided by Gradle itself
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        testCompile 'info.solidsoft.spock:spock-global-unroll:0.5.1'
        testCompile 'net.bytebuddy:byte-buddy:1.7.5' //for Spying in Spock
        testCompile 'junit:junit:4.12'

        signature 'org.codehaus.mojo.signature:java17:1.0@signature'
    }

    animalsniffer {
        sourceSets = [subproject.sourceSets.main]  //just for production classes - Animal Sniffer fails with: 'Undefined reference: void for Spock tests'
        //https://github.com/mojohaus/animal-sniffer/issues/27
    }
}

cDeliveryBoy {
    tasks {
        promoteRepositoryTask = "releaseRepository"
    }
    nexus {
        autoPromote = true
    }
}

tasks.withType(AnimalSniffer) {
    onlyIf { project.hasProperty('compatibility') }
}

nexusStaging {
    packageGroup = "info.solidsoft"
    stagingProfileId = "34a3a5beeaa96"
}

/*
check.shouldRunAfter('functional-tests:funcTest')
check.dependsOn ('functional-tests:classes')
uploadArchives.dependsOn('functional-tests:funcTest', 'check')
*/
if (hasProperty('pluginPortal')) {

    apply plugin: 'com.gradle.plugin-publish'

    pluginBundle {
        website = 'https://github.com/szpak/gradle-pitest-plugin'
        vcsUrl = 'https://github.com/szpak/gradle-pitest-plugin'

        plugins {
            plugin {
                id = 'info.solidsoft.pitest'
                displayName = 'gradle-pitest-plugin'
                description = 'Gradle plugin for PIT mutation testing'
                tags = ['test', 'pit', 'mutation-testing']
            }
        }

        mavenCoordinates {
            groupId = project.group
            artifactId = project.name
        }
    }

    publishPlugins {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
    }
    ciBuild.dependsOn publishPlugins
}

if (hasProperty('changelogSync')) {

    task syncChangelog(type: Exec) {
        doFirst { logger.info("Synchronizing changelog with GitHub for version ${project.version}") }
        commandLine 'chandler', 'push', "release/${project.version}", '--tag-prefix=release/'
    }

    syncChangelog {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
        if (project.tasks.findByName("publishPlugins")) {
            mustRunAfter publishPlugins
        }
    }
    ciBuild.dependsOn syncChangelog
}

